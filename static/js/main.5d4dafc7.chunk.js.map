{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","addTask","title","addTasks","setTitle","useState","tasksItems","tasks","map","task","key","id","type","checked","isDone","onClick","removeTask","onKeyDown","e","value","onChange","currentTarget","changeFilter","App","tasksForRender","v1","setTasks","filter","setFilter","console","log","className","taskID","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4PAiBO,SAASA,EAASC,GAErB,IAAMC,EAAU,WACZC,GAASF,EAAMG,SAASD,GACxBE,EAAS,KAKb,EAA0BC,mBAAiB,IAA3C,mBAAOH,EAAP,KAAcE,EAAd,KAMIE,EAAaN,EAAMO,MAAMC,KAAI,SAACC,GAC9B,OAAO,wBAAIC,IAAKD,EAAKE,IACjB,2BAAOC,KAAK,WAAWC,QAASb,EAAMO,MAAM,GAAGO,SAC/C,8BAAOd,EAAMO,MAAM,GAAGL,OACtB,4BAAQa,QAAS,kBAAMf,EAAMgB,WAAWP,EAAKE,MAA7C,WAMR,OAAO,6BACH,4BAAKX,EAAME,OACX,6BACI,2BAAOe,UAtBE,SAACC,GACJ,UAAVA,EAAER,KAAmBT,KAqBWkB,MAAOjB,EAAOkB,SAlB5B,SAACF,GAAD,OAAsCd,EAASc,EAAEG,cAAcF,UAmB7E,4BAAQJ,QAASd,GAAjB,MAEJ,4BACKK,GAEL,6BACI,4BAAQS,QAxBY,kBAAMf,EAAMsB,aAAa,SAwB7C,OACA,4BAAQP,QAxBe,kBAAMf,EAAMsB,aAAa,YAwBhD,UACA,4BAAQP,QAxBkB,kBAAMf,EAAMsB,aAAa,eAwBnD,aACA,oD,YCIGC,MAlDf,WAEI,IAwBIC,EAxBJ,EAAwBnB,mBAA0B,CAC9C,CAACM,GAAIc,cAAMvB,MAAO,MAAOY,QAAQ,GACjC,CAACH,GAAIc,cAAMvB,MAAO,KAAMY,QAAQ,GAChC,CAACH,GAAIc,cAAMvB,MAAO,UAAWY,QAAQ,KAHzC,mBAAKP,EAAL,KAAYmB,EAAZ,KAMA,EAA4BrB,mBAA0B,OAAtD,mBAAOsB,EAAP,KAAeC,EAAf,KAmBA,OAFAC,QAAQC,MAEAH,GACJ,IAAK,YACDH,EAAiBjB,EAAMoB,QAAO,SAAApB,GAAK,OAAIA,EAAMO,UAC7C,MACJ,IAAK,SACDU,EAAiBjB,EAAMoB,QAAO,SAAApB,GAAK,OAAKA,EAAMO,UAC9C,MACJ,QACIU,EAAiBjB,EAGzB,OACI,yBAAKwB,UAAU,OACX,kBAAChC,EAAD,CAAUG,MAAM,gBACNK,MAAOiB,EACPR,WAjCC,SAACgB,GAChBN,EAASnB,EAAMoB,QAAO,SAAAlB,GAAI,OAAIA,EAAKE,KAAOqB,OAiC5BV,aA9BG,SAACK,GAClBC,EAAUD,IA8BIxB,SA3BH,SAACD,GACZwB,EAAS,GAAD,mBAAKnB,GAAL,CAAY,CAChBI,GAAIc,cACJvB,QACAY,QAAQ,WClBAmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.5d4dafc7.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {FilterValueType} from \"./App\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string) => void\r\n    changeFilter: (filter: FilterValueType) => void\r\n    addTasks: (title: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const addTask = () => {\r\n        title && props.addTasks(title)\r\n        setTitle('')\r\n    }\r\n    const KeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === \"Enter\" && addTask()\r\n    }\r\n    const [title, setTitle] = useState<string>('')\r\n    const onChangePress = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onClickSetFilterAll = () => props.changeFilter('all')\r\n    const onClickSetFilterActive = () => props.changeFilter('active')\r\n    const onClickSetFilterCompleted = () => props.changeFilter('completed')\r\n\r\n    let tasksItems = props.tasks.map((task: TaskType) => {\r\n        return <li key={task.id}>\r\n            <input type=\"checkbox\" checked={props.tasks[0].isDone}/>\r\n            <span>{props.tasks[0].title}</span>\r\n            <button onClick={() => props.removeTask(task.id)\r\n            }>XXL\r\n            </button>\r\n        </li>\r\n    })\r\n\r\n    return <div>\r\n        <h3>{props.title}</h3>\r\n        <div>\r\n            <input onKeyDown={KeyPress} value={title} onChange={onChangePress}/>\r\n            <button onClick={addTask}>+</button>\r\n        </div>\r\n        <ul>\r\n            {tasksItems}\r\n        </ul>\r\n        <div>\r\n            <button onClick={onClickSetFilterAll}>All</button>\r\n            <button onClick={onClickSetFilterActive}>Active</button>\r\n            <button onClick={onClickSetFilterCompleted}>Completed</button>\r\n            <p>Хай!</p>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\n\r\n\r\nfunction App() {\r\n\r\n    let [tasks, setTasks] = useState<Array<TaskType>>([\r\n        {id: v1(), title: \"CSS\", isDone: false},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: false},\r\n    ])\r\n\r\n    const [filter, setFilter] = useState<FilterValueType>('all')\r\n    const removeTask = (taskID: string) => {\r\n        setTasks(tasks.filter(task => task.id !== taskID))\r\n    }\r\n\r\n    const changeFilter = (filter: FilterValueType) => {\r\n        setFilter(filter)\r\n    }\r\n\r\n    let addTasks = (title: string) => {\r\n        setTasks([...tasks ,{\r\n            id: v1(),\r\n            title,\r\n            isDone: false\r\n\r\n        }])\r\n    }\r\n    console.log()\r\n    let tasksForRender;\r\n    switch (filter) {\r\n        case \"completed\":\r\n            tasksForRender = tasks.filter(tasks => tasks.isDone)\r\n            break\r\n        case \"active\":\r\n            tasksForRender = tasks.filter(tasks => !tasks.isDone)\r\n            break\r\n        default:\r\n            tasksForRender = tasks\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist title=\"What to learn\"\r\n                      tasks={tasksForRender}\r\n                      removeTask={removeTask}\r\n                      changeFilter={changeFilter}\r\n                      addTasks={addTasks}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","callBack","useState","title","setTitle","error","setError","addTask","newTitle","trim","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","edit","setEdit","setNewTitleTitle","toggleHandler","onBlur","autoFocus","onDoubleClick","Todolist","updateTodolist","id","removeTodolist","tasks","map","t","key","isDone","type","newIsDoneValue","checked","changeTaskStatus","TaskId","updateTask","updateTaskHandler","removeTask","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolistTasks","task","taskId","el","console","log","changeStatus","find","todolist","tl","newTodolistId","allTodolistTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c0de5983.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: PropsType) => {\r\n    const {callBack} = props\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== \"\") {\r\n            callBack(newTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    callBack: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: PropsType) => {\r\n    const {title, callBack} = props\r\n    const [edit, setEdit] = useState(false)\r\n    let [newTitle, setNewTitleTitle] = useState(title)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitleTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        callBack(newTitle);\r\n    }\r\n\r\n\r\n    const toggleHandler = () => {\r\n        setEdit(!edit)\r\n        addTask()\r\n    }\r\n\r\n    return (\r\n        edit\r\n            ? <input onBlur={toggleHandler}  onChange={onChangeHandler} autoFocus value={newTitle}/>\r\n            : <span onDoubleClick={toggleHandler}>{props.title}</span>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    updateTask: (todolistId: string, taskId: string, newTitle: string) => void\r\n    updateTodolist: (todolistId: string, newTitle: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    const addTaskHandler = (newTitle: string) => {\r\n        props.addTask(newTitle, props.id)\r\n    }\r\n\r\n    const updateTodolistHandler = (newTitle: string) => {\r\n        props.updateTodolist(props.id, newTitle)\r\n    }\r\n\r\n    const updateTaskHandler = (TaskId: string, newTitle: string) => {\r\n        props.updateTask(props.id, TaskId, newTitle)\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            {/*{props.title}*/}\r\n            <EditableSpan title={props.title} callBack={updateTodolistHandler}/>\r\n            <button onClick={removeTodolist}>x</button>\r\n        </h3>\r\n        <AddItemForm callBack={addTaskHandler}/>\r\n\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    // const updateTaskHandler=(newTitle:string)=>{\r\n                    //     props.updateTask(props.id,t.id,newTitle)\r\n                    // }\r\n\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        {/*<span>{t.title}</span>*/}\r\n                        <EditableSpan title={t.title} callBack={(TaskId) => updateTaskHandler(t.id, TaskId)}/>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ],\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    const addTodolist = (newTitle: string) => {\r\n        const newTodolistId = v1()\r\n        const newTodolist: TodolistType = {id: newTodolistId, title: newTitle, filter: \"all\"};\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({\r\n            [newTodolistId]: [], ...tasks\r\n        })\r\n    }\r\n    const updateTask=(todolistId: string,taskId:string,newTitle: string)=>{\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(el=>el.id===taskId ?{...el,title:newTitle}  :el) })\r\n        console.log(newTitle)\r\n    }\r\n\r\n    const updateTodolist=(todolistId: string,newTitle: string)=>{\r\n        setTodolists(todolists.map(el=>el.id===todolistId ?{...el,title:newTitle} :el))\r\n        console.log(newTitle)\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm callBack={addTodolist}/>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                    }\r\n\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        updateTask={updateTask}\r\n                        updateTodolist={updateTodolist}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}